#!/usr/bin/env ruby

require 'optparse'

require 'jist'

# For the holdings of options.
options = {}


opts = OptionParser.new do |opts|
  executable_name = File.split($0)[1]
  opts.banner = <<-EOS
Jist (v#{Jist::VERSION}) let's you upload to https://gist.github.com/

Usage: #{executable_name} [-p] [-d DESC] [-t TOKEN] [-f FILENAME] [FILE]
       #{executable_name} --login

When used with no arguments, jist creates an Anonymous, private, gist, with
no description. The FILENAME defaults to "a.rb" and we read the contents of
STDIN.

If you'd like your gists to be associated with your github account, so that
you can edit them, and find them in future, first use `jist --login` to obtain
an Oauth2 access token. This is stored and used for all future uses of jist.

If you're calling jist from another program that already has an access_token
with the "gist" scope, then pass it using `jist -t`.

If you specify a FILE on the command line, then jist will use that as the
default value for FILENAME too. If not, jist will assume that the file you
provide on STDIN is called "a.rb". The FILENAME is mostly important for
determining which language to use for syntax highlighting.

Making a gist public causes it to have a prettier, guessable url. And adding
a description can provide useful context to people who stumble across your
gist.

  EOS

  opts.on("--login", "Authenticate jist on this computer.") do
    Jist.login!
    exit
  end

  opts.on("-f", "--filename [NAME.EXTENSION]", "Sets the filename and syntax type.") do |filename|
    options[:filename] = filename
  end

  opts.on("-p", "--public", "Makes your gist public.") do |public|
    options[:public] = public
  end

  opts.on("-d", "--description DESCRIPTION", "Adds a description to your gist.") do |description|
    options[:description] = description
  end

  opts.on("-t", "--token OAUTH_TOKEN", "The OAuth2 access_token to use.") do |token|
    options[:access_token] = token
  end

  opts.on_tail("-h","--help", "Show this message.") do
    puts opts
    exit
  end

  opts.on_tail("-v", "--version", "Print the version.") do
    puts "jist v#{Jist::VERSION}"
    exit
  end

end
opts.parse!

if ARGV.size == 0
  puts Jist.gist(ARGF.read, options)['html_url']
elsif ARGV.size == 1
  puts Jist.gist(File.read(File.expand_path(ARGV[0])), {:filename => File.basename(ARGV[0])}.merge(options))['html_url']
else
  puts opts
end
