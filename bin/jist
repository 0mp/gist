#!/usr/bin/env ruby

require 'optparse'

require 'jist'

# For the holdings of options.
options = {}


opts = OptionParser.new do |opts|
  executable_name = File.split($0)[1]
  opts.banner = <<-EOS
Jist is a simple command that let's you create new gists from the terminal.

Usage: #{executable_name} [-p] [-d DESC] [-t TOKEN] [-f FILENAME] file
       #{executable_name} --login

By default it will create anonymous, private gists. To create gists using your
GitHub account, first use `jist --login` and it will exchange your username
and password for an access token that is stored in ~/.jist.

If you want to make gists public (in practice this means that they have a
guessable url) then use `jist -p`

If you want to call jist from another progam that already has an access token
for the current user, and that access_token has the 'gist' scope, then you can
use `jist -t abcdef0123456789abcdef0123456789abcdef01`

  EOS

  opts.on("-t", "--token OAUTH_TOKEN", "Provide an Oauth2 token to authenticate with github.") do |token|
    options[:access_token] = token
  end

  opts.on("-f", "--filename [NAME.EXTENSION]", Array,"Change the syntax highlighting (default is a.rb)") do |filename|
    options[:filename] = filename
  end

  opts.on("-p", "--public", "Add this flag you want your gist to have a guessable url") do |public|
    options[:public] = public
  end

  opts.on("-d", "--description DESCRIPTION", "Adds a description to your gist") do |description|
    options[:description] = description
  end

  opts.on("--login", "Obtain a gist-only Oauth2 token and store it for later use.") do
    Jist.login!
    exit
  end

  opts.on_tail("-h","--help", "Show this message") do
    $stdout.puts opts
    exit
  end

  opts.on_tail("-v", "--version") do
    puts "jist v#{Jist::VERSION}"
    exit
  end

end
opts.parse!

if options[:login]
  Jist.login!
  exit
end

if ARGV.empty?
  $stdout << opts.help
else
  $stdout.puts Jist.gist(ARGF.read, options)["html_url"]
end
